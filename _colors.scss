@use 'variables';

// Define a function to generate color shades (remains useful)
@function shade($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Define a map of semantic color names and values using centralized variables
$colors: (
  "primary": variables.$primary-color,
  "secondary": variables.$secondary-color,
  "success": variables.$success-color,
  "warning": variables.$warning-color,
  "danger": variables.$danger-color,
  "light": variables.$light-color,
  "dark": variables.$dark-color,
  "white": variables.$white-color
  // Note: $black-color could be added if needed for utilities like .text-black
);

// Define classes for each semantic color
@each $color-name, $color-value in $colors {
  .text-#{$color-name} {
    color: $color-value;
  }
  
  .bg-#{$color-name} {
    background-color: $color-value;
  }
  
  .border-#{$color-name} {
    border-color: $color-value;
  }
  
  // Define light and dark shades of each color
  // Only generate shades for colors that are not white or very light already
  @if $color-name != "white" and $color-name != "light" {
    .text-#{$color-name}-light {
      color: shade($color-value, 70%);
    }

    .bg-#{$color-name}-light {
      background-color: shade($color-value, 70%);
    }

    .border-#{$color-name}-light {
      border-color: shade($color-value, 70%);
    }

    .text-#{$color-name}-dark {
      // Using mix with black for dark shades for more control
      color: mix(black, $color-value, 30%);
    }

    .bg-#{$color-name}-dark {
      background-color: mix(black, $color-value, 30%);
    }

    .border-#{$color-name}-dark {
      border-color: mix(black, $color-value, 30%);
    }
  }
}
